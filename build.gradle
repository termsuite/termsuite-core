apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'fr.univ-nantes.termsuite'
archivesBaseName = 'termsuite-core'
version = '2.1-SNAPSHOT'

project.ext.description = 'A Java UIMA-based toolbox for multilingual and efficient terminology extraction an multilingual term alignment'
project.ext.organization = 'LINA CNRS UMR 6241 - UniversitÃ© de Nantes'
project.ext.name = 'TermSuite'
project.ext.url = 'https://github.com/termsuite/termsuite-core'
project.ext.license = 'Apache 2'
project.ext.licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
project.ext.jcasFile = 'src/main/resources/TermSuite_TS.xml'

sourceCompatibility = 1.7
targetCompatibility = 1.7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'




///////////////////////////////////////////////////////////////// CONFIGURATION
javadoc{
	options {
		failOnError = false
		encoding "UTF-8"
		docEncoding "UTF-8"
		charSet "UTF-8"
	}
}

////////////////////////////////////////////////////////////////// DEPENDENCIES

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}


/*
 * Deactivate Java 8 doclint if Java version is 8
 * See : blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
 */
if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
	  tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	  }
	}
  }


artifacts {
	archives javadocJar, sourcesJar
}

if(hasProperty("signing.keyId")) {
	// activate signing of artifacts, only if signing is configured properly
	signing {
		sign configurations.archives
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId group
			artifactId archivesBaseName
			version version

			from components.java
		}
	}
}

if(hasProperty("ossrhUsername")) {
  uploadArchives {
  	repositories {
  	  mavenDeployer {
    		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      		repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
      		  authentication(userName: ossrhUsername, password: ossrhPassword)
      		}
      		snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
      		  authentication(userName: ossrhUsername, password: ossrhPassword)
      		}

      		pom.project {
      		  name project.ext.name
      		  packaging 'jar'
      		  // optionally artifactId can be defined here
      		  description project.ext.description
      		  url project.ext.url

      		  scm {
      			  connection 'scm:git:git@github.com:termsuite/termsuite-core.git'
      			  developerConnection 'scm:git:git@github.com:termsuite/termsuite-core.git'
      			  url 'git@github.com:termsuite/termsuite-core.git'
      		  }

      		  licenses {
      			  license {
      				  name 'The Apache License, Version 2.0'
      				  url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
      			  }
      		  }

      		  developers {
      			  developer {
      				  id developerId
      				  name developerName
      				  email developerEmail
      			  }
      		  }
      		}
	     }
  	}
  }
} else {
  def msg = "Publishing to maven central (task uploadArchives) is not possible since no gradle property file is found (use \"\$ cp gradle.properties.sample gradle.properties\" and edit gradle.properties)"
  logger.warn(msg)
}

configurations {
	prepare.extendsFrom(compile)
}

dependencies {
	// Test
	testCompile "junit:junit:4.12"
	testCompile "eu.codearte.catch-exception:catch-exception:1.4.4"
	testCompile "org.assertj:assertj-core:2.0.0"
	testCompile "org.mockito:mockito-all:1.10.19"
	testCompile "com.fasterxml.jackson.core:jackson-databind:2.6.1"

	// Configure logging at runtime
	compile "ch.qos.logback:logback-classic:1.1.3"


	// UIMA
	compile 'org.apache.uima:uimaj-core:2.6.0'
	compile "org.apache.uima:uimafit-core:2.1.0"

	compile "org.apache.uima:uimaj-tools:2.6.0" // jcasgen

	// Apache Common
	compile "org.apache.commons:commons-lang3:3.4"
	compile "commons-cli:commons-cli:1.2"
	compile "commons-io:commons-io:1.3.2"

	// Mate Tagger
	compile "com.googlecode.mate-tools:anna:3.5"

	// Groovy
	compile "org.codehaus.groovy:groovy:2.4.4"

	// Guava
	compile "com.google.guava:guava:18.0"

	// Snake YAML
	compile "org.yaml:snakeyaml:1.15"

	// Jackson (json)
	compile "com.fasterxml.jackson.core:jackson-core:2.5.4"

	// UIMA Components
	compile 'fr.univ-nantes.julestar:uima-tree-tagger-wrapper:1.1'
	compile 'fr.univ-nantes.julestar:uima-tokenizer:1.1'
	compile 'fr.univ-nantes.julestar:uima-filter:1.1'
	compile 'fr.univ-nantes.julestar:uima-mapper:1.1'
	compile 'fr.univ-nantes.julestar:uima-chinese-segmenter:1.1'
	compile 'fr.univ-nantes.julestar:uima-tokens-regex:1.2'
	compile 'fr.univ-nantes.julestar:uima-profiler:1.1'
	compile 'fr.univ-nantes.julestar:uima-stemmer:1.1'

	// JCas type generation
	prepare "org.apache.uima:uimaj-tools:2.8.1"
}

////////////////////////////////////////////////////////////// SPECIFIC TASKS

jar {
	// make it fat
    dependsOn configurations.runtime
	from( configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } ) {
		 exclude "META-INF/*"
    }

    // cannot exclude META-INF for groovy to run
	from( configurations.runtime.findAll{it.getAbsolutePath().contains("org.codehaus.groovy")}.collect { it.isDirectory() ? it : zipTree(it) } ) {
		include "META-INF/*"
	}

	// tune manifest
    manifest {
        attributes(
			"Implementation-Title": project.ext.name,
			"Implementation-Version": version,
            "Built-By": System.getProperty('user.name'),
            "Built-Date": new Date(),
            "Built-JDK": System.getProperty('java.version'),
			"Main-Class": "eu.project.ttc.tools.TermSuite")
    }
}

clean.doLast {
    project.delete (fileTree(dir: 'sources/eu/project/ttc/types'))
    project.delete (fileTree(dir: 'sources/org')) // org.apache.uima.examples
    println 'Cleaning typesystem generated sources.'
}


//////////////////////////////////////////////////////////////////
// JCASGEN
// Author: Damien Raude-Morvan
//
// Generate UIMA type system
//////////////////////////////////////////////////////////////////

task jcasgen(type: JavaExec) {
	description = 'Generate UIMA TS classes'
	ext.srcFile = file("$projectDir/$project.jcasFile")
	ext.outputDir = file("$projectDir/src/main/java")
	inputs.file srcFile
	outputs.dir outputDir
	classpath configurations.prepare
	// This ensures availability of type system imports
	// however, assumes that files are in desc subfolder
	systemProperty 'uima.datapath', "$projectDir/desc"
	main = 'org.apache.uima.tools.jcasgen.Jg'
	args = ['-jcasgeninput', srcFile, '-jcasgenoutput', outputDir]
}

// forces jcasgen before java compiles
classes.dependsOn jcasgen

// UIMA type system is needed for Java compile
compileJava.source jcasgen.outputs, sourceSets.main.java
